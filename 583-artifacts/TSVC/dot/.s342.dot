digraph "CFG for 's342' function" {
	label="CFG for 's342' function";

	Node0x564c93c11110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{entry:\l  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x\l... i8], [5 x i8]* @__func__.s342, i64 0, i64 0)) #11\l  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64\l... 0, i32 0\l  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11\l  br label %for.cond2.preheader\l}"];
	Node0x564c93c11110 -> Node0x564c93c115b0;
	Node0x564c93c115b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{for.cond2.preheader:                              \l  %nl.029 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]\l  br label %for.body5\l}"];
	Node0x564c93c115b0 -> Node0x564c93c117e0;
	Node0x564c93c11900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{for.cond.cleanup:                                 \l  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64\l... 0, i32 1\l  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8*\l... null) #11\l  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x\l... i8], [5 x i8]* @__func__.s342, i64 0, i64 0)) #11\l  ret float %call17\l}"];
	Node0x564c93c116d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{for.cond.cleanup4:                                \l  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x\l... float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds\l... ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr\l... inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float*\l... getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0),\l... float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0,\l... i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x\l... [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds\l... ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x\l... float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]*\l... @cc, i64 0, i64 0), float 0.000000e+00) #11\l  %inc14 = add nuw nsw i32 %nl.029, 1\l  %exitcond.not = icmp eq i32 %inc14, 100000\l  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader,\l... !llvm.loop !2\l|{<s0>T|<s1>F}}"];
	Node0x564c93c116d0:s0 -> Node0x564c93c11900;
	Node0x564c93c116d0:s1 -> Node0x564c93c115b0;
	Node0x564c93c117e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body5:                                        \l  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7,\l... %for.inc.7 ]\l  %j.027 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]\l  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64\l... 0, i64 %indvars.iv\l  %0 = load float, float* %arrayidx, align 32, !tbaa !4\l  %cmp6 = fcmp ogt float %0, 0.000000e+00\l  br i1 %cmp6, label %if.then, label %for.inc\l|{<s0>T|<s1>F}}"];
	Node0x564c93c117e0:s0 -> Node0x564c93c12680;
	Node0x564c93c117e0:s1 -> Node0x564c93c12750;
	Node0x564c93c12680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then:                                          \l  %inc = add nsw i32 %j.027, 1\l  %idxprom7 = sext i32 %inc to i64\l  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7\l  %1 = load float, float* %arrayidx8, align 4, !tbaa !4\l  store float %1, float* %arrayidx, align 32, !tbaa !4\l  br label %for.inc\l}"];
	Node0x564c93c12680 -> Node0x564c93c12750;
	Node0x564c93c12750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc:                                          \l  %j.1 = phi i32 [ %inc, %if.then ], [ %j.027, %for.body5 ]\l  %indvars.iv.next = or i64 %indvars.iv, 1\l  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next\l  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4\l  %cmp6.1 = fcmp ogt float %2, 0.000000e+00\l  br i1 %cmp6.1, label %if.then.1, label %for.inc.1\l|{<s0>T|<s1>F}}"];
	Node0x564c93c12750:s0 -> Node0x564c93c132f0;
	Node0x564c93c12750:s1 -> Node0x564c93c13370;
	Node0x564c93c132f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.1:                                        \l  %inc.1 = add nsw i32 %j.1, 1\l  %idxprom7.1 = sext i32 %inc.1 to i64\l  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.1\l  %3 = load float, float* %arrayidx8.1, align 4, !tbaa !4\l  store float %3, float* %arrayidx.1, align 4, !tbaa !4\l  br label %for.inc.1\l}"];
	Node0x564c93c132f0 -> Node0x564c93c13370;
	Node0x564c93c13370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.1:                                        \l  %j.1.1 = phi i32 [ %inc.1, %if.then.1 ], [ %j.1, %for.inc ]\l  %indvars.iv.next.1 = or i64 %indvars.iv, 2\l  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.1\l  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4\l  %cmp6.2 = fcmp ogt float %4, 0.000000e+00\l  br i1 %cmp6.2, label %if.then.2, label %for.inc.2\l|{<s0>T|<s1>F}}"];
	Node0x564c93c13370:s0 -> Node0x564c93c13ca0;
	Node0x564c93c13370:s1 -> Node0x564c93c13cf0;
	Node0x564c93c13ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.2:                                        \l  %inc.2 = add nsw i32 %j.1.1, 1\l  %idxprom7.2 = sext i32 %inc.2 to i64\l  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.2\l  %5 = load float, float* %arrayidx8.2, align 4, !tbaa !4\l  store float %5, float* %arrayidx.2, align 8, !tbaa !4\l  br label %for.inc.2\l}"];
	Node0x564c93c13ca0 -> Node0x564c93c13cf0;
	Node0x564c93c13cf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.2:                                        \l  %j.1.2 = phi i32 [ %inc.2, %if.then.2 ], [ %j.1.1, %for.inc.1 ]\l  %indvars.iv.next.2 = or i64 %indvars.iv, 3\l  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.2\l  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4\l  %cmp6.3 = fcmp ogt float %6, 0.000000e+00\l  br i1 %cmp6.3, label %if.then.3, label %for.inc.3\l|{<s0>T|<s1>F}}"];
	Node0x564c93c13cf0:s0 -> Node0x564c93c14570;
	Node0x564c93c13cf0:s1 -> Node0x564c93c12a20;
	Node0x564c93c14570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.3:                                        \l  %inc.3 = add nsw i32 %j.1.2, 1\l  %idxprom7.3 = sext i32 %inc.3 to i64\l  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.3\l  %7 = load float, float* %arrayidx8.3, align 4, !tbaa !4\l  store float %7, float* %arrayidx.3, align 4, !tbaa !4\l  br label %for.inc.3\l}"];
	Node0x564c93c14570 -> Node0x564c93c12a20;
	Node0x564c93c12a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.3:                                        \l  %j.1.3 = phi i32 [ %inc.3, %if.then.3 ], [ %j.1.2, %for.inc.2 ]\l  %indvars.iv.next.3 = or i64 %indvars.iv, 4\l  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.3\l  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4\l  %cmp6.4 = fcmp ogt float %8, 0.000000e+00\l  br i1 %cmp6.4, label %if.then.4, label %for.inc.4\l|{<s0>T|<s1>F}}"];
	Node0x564c93c12a20:s0 -> Node0x564c93c13ba0;
	Node0x564c93c12a20:s1 -> Node0x564c93c15200;
	Node0x564c93c13ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.4:                                        \l  %inc.4 = add nsw i32 %j.1.3, 1\l  %idxprom7.4 = sext i32 %inc.4 to i64\l  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.4\l  %9 = load float, float* %arrayidx8.4, align 4, !tbaa !4\l  store float %9, float* %arrayidx.4, align 16, !tbaa !4\l  br label %for.inc.4\l}"];
	Node0x564c93c13ba0 -> Node0x564c93c15200;
	Node0x564c93c15200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.4:                                        \l  %j.1.4 = phi i32 [ %inc.4, %if.then.4 ], [ %j.1.3, %for.inc.3 ]\l  %indvars.iv.next.4 = or i64 %indvars.iv, 5\l  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.4\l  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4\l  %cmp6.5 = fcmp ogt float %10, 0.000000e+00\l  br i1 %cmp6.5, label %if.then.5, label %for.inc.5\l|{<s0>T|<s1>F}}"];
	Node0x564c93c15200:s0 -> Node0x564c93c15ab0;
	Node0x564c93c15200:s1 -> Node0x564c93c15b00;
	Node0x564c93c15ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.5:                                        \l  %inc.5 = add nsw i32 %j.1.4, 1\l  %idxprom7.5 = sext i32 %inc.5 to i64\l  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.5\l  %11 = load float, float* %arrayidx8.5, align 4, !tbaa !4\l  store float %11, float* %arrayidx.5, align 4, !tbaa !4\l  br label %for.inc.5\l}"];
	Node0x564c93c15ab0 -> Node0x564c93c15b00;
	Node0x564c93c15b00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.5:                                        \l  %j.1.5 = phi i32 [ %inc.5, %if.then.5 ], [ %j.1.4, %for.inc.4 ]\l  %indvars.iv.next.5 = or i64 %indvars.iv, 6\l  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.5\l  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4\l  %cmp6.6 = fcmp ogt float %12, 0.000000e+00\l  br i1 %cmp6.6, label %if.then.6, label %for.inc.6\l|{<s0>T|<s1>F}}"];
	Node0x564c93c15b00:s0 -> Node0x564c93c163b0;
	Node0x564c93c15b00:s1 -> Node0x564c93c16400;
	Node0x564c93c163b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.6:                                        \l  %inc.6 = add nsw i32 %j.1.5, 1\l  %idxprom7.6 = sext i32 %inc.6 to i64\l  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.6\l  %13 = load float, float* %arrayidx8.6, align 4, !tbaa !4\l  store float %13, float* %arrayidx.6, align 8, !tbaa !4\l  br label %for.inc.6\l}"];
	Node0x564c93c163b0 -> Node0x564c93c16400;
	Node0x564c93c16400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.6:                                        \l  %j.1.6 = phi i32 [ %inc.6, %if.then.6 ], [ %j.1.5, %for.inc.5 ]\l  %indvars.iv.next.6 = or i64 %indvars.iv, 7\l  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %indvars.iv.next.6\l  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4\l  %cmp6.7 = fcmp ogt float %14, 0.000000e+00\l  br i1 %cmp6.7, label %if.then.7, label %for.inc.7\l|{<s0>T|<s1>F}}"];
	Node0x564c93c16400:s0 -> Node0x564c93c16cb0;
	Node0x564c93c16400:s1 -> Node0x564c93c12260;
	Node0x564c93c16cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{if.then.7:                                        \l  %inc.7 = add nsw i32 %j.1.6, 1\l  %idxprom7.7 = sext i32 %inc.7 to i64\l  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b,\l... i64 0, i64 %idxprom7.7\l  %15 = load float, float* %arrayidx8.7, align 4, !tbaa !4\l  store float %15, float* %arrayidx.7, align 4, !tbaa !4\l  br label %for.inc.7\l}"];
	Node0x564c93c16cb0 -> Node0x564c93c12260;
	Node0x564c93c12260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc.7:                                        \l  %j.1.7 = phi i32 [ %inc.7, %if.then.7 ], [ %j.1.6, %for.inc.6 ]\l  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8\l  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000\l  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5,\l... !llvm.loop !8\l|{<s0>T|<s1>F}}"];
	Node0x564c93c12260:s0 -> Node0x564c93c116d0;
	Node0x564c93c12260:s1 -> Node0x564c93c117e0;
}
