digraph "CFG for 's4116' function" {
	label="CFG for 's4116' function";

	Node0x564c93cba060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{entry:\l  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t*\l... %func_args, i64 0, i32 2\l  %0 = bitcast i8** %arg_info to %struct.anon.4**\l  %1 = load %struct.anon.4*, %struct.anon.4** %0, align 8, !tbaa !2\l  %a = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 0\l  %2 = load i32*, i32** %a, align 8, !tbaa !9\l  %b = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 1\l  %3 = load i32, i32* %b, align 8, !tbaa !12\l  %c = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 2\l  %4 = load i32, i32* %c, align 4, !tbaa !13\l  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x\l... i8], [6 x i8]* @__func__.s4116, i64 0, i64 0)) #11\l  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64\l... 0, i32 0\l  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11\l  %sub = add nsw i32 %3, -1\l  %idxprom6 = sext i32 %sub to i64\l  %5 = sext i32 %4 to i64\l  br label %for.cond2.preheader\l}"];
	Node0x564c93cba060 -> Node0x564c93cbb010;
	Node0x564c93cbb010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{for.cond2.preheader:                              \l  %nl.038 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]\l  br label %for.body5\l}"];
	Node0x564c93cbb010 -> Node0x564c93cbb3c0;
	Node0x564c93cbb4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{for.cond.cleanup:                                 \l  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64\l... 0, i32 1\l  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8*\l... null) #11\l  ret float %add12.6\l}"];
	Node0x564c93cbb180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{for.cond.cleanup4:                                \l  %call14 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x\l... float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds\l... ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr\l... inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float*\l... getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0),\l... float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0,\l... i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x\l... [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds\l... ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x\l... float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]*\l... @cc, i64 0, i64 0), float 0.000000e+00) #11\l  %inc16 = add nuw nsw i32 %nl.038, 1\l  %exitcond.not = icmp eq i32 %inc16, 10000000\l  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader,\l... !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x564c93cbb180:s0 -> Node0x564c93cbb4e0;
	Node0x564c93cbb180:s1 -> Node0x564c93cbb010;
	Node0x564c93cbb3c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body5:                                        \l  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7,\l... %for.body5.7 ]\l  %sum.136 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add12.7,\l... %for.body5.7 ]\l  %6 = add nsw i64 %indvars.iv, %5\l  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64\l... 0, i64 %6\l  %7 = load float, float* %arrayidx, align 4, !tbaa !16\l  %arrayidx9 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv\l  %8 = load i32, i32* %arrayidx9, align 4, !tbaa !18\l  %idxprom10 = sext i32 %8 to i64\l  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10\l  %9 = load float, float* %arrayidx11, align 4, !tbaa !16\l  %mul = fmul float %7, %9\l  %add12 = fadd float %sum.136, %mul\l  %indvars.iv.next = or i64 %indvars.iv, 1\l  %10 = add nsw i64 %indvars.iv.next, %5\l  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %10\l  %11 = load float, float* %arrayidx.1, align 4, !tbaa !16\l  %arrayidx9.1 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next\l  %12 = load i32, i32* %arrayidx9.1, align 4, !tbaa !18\l  %idxprom10.1 = sext i32 %12 to i64\l  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.1\l  %13 = load float, float* %arrayidx11.1, align 4, !tbaa !16\l  %mul.1 = fmul float %11, %13\l  %add12.1 = fadd float %add12, %mul.1\l  %indvars.iv.next.1 = or i64 %indvars.iv, 2\l  %14 = add nsw i64 %indvars.iv.next.1, %5\l  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %14\l  %15 = load float, float* %arrayidx.2, align 4, !tbaa !16\l  %arrayidx9.2 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.1\l  %16 = load i32, i32* %arrayidx9.2, align 4, !tbaa !18\l  %idxprom10.2 = sext i32 %16 to i64\l  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.2\l  %17 = load float, float* %arrayidx11.2, align 4, !tbaa !16\l  %mul.2 = fmul float %15, %17\l  %add12.2 = fadd float %add12.1, %mul.2\l  %indvars.iv.next.2 = or i64 %indvars.iv, 3\l  %18 = add nsw i64 %indvars.iv.next.2, %5\l  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %18\l  %19 = load float, float* %arrayidx.3, align 4, !tbaa !16\l  %arrayidx9.3 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.2\l  %20 = load i32, i32* %arrayidx9.3, align 4, !tbaa !18\l  %idxprom10.3 = sext i32 %20 to i64\l  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.3\l  %21 = load float, float* %arrayidx11.3, align 4, !tbaa !16\l  %mul.3 = fmul float %19, %21\l  %add12.3 = fadd float %add12.2, %mul.3\l  %indvars.iv.next.3 = or i64 %indvars.iv, 4\l  %22 = add nsw i64 %indvars.iv.next.3, %5\l  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %22\l  %23 = load float, float* %arrayidx.4, align 4, !tbaa !16\l  %arrayidx9.4 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.3\l  %24 = load i32, i32* %arrayidx9.4, align 4, !tbaa !18\l  %idxprom10.4 = sext i32 %24 to i64\l  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.4\l  %25 = load float, float* %arrayidx11.4, align 4, !tbaa !16\l  %mul.4 = fmul float %23, %25\l  %add12.4 = fadd float %add12.3, %mul.4\l  %indvars.iv.next.4 = or i64 %indvars.iv, 5\l  %26 = add nsw i64 %indvars.iv.next.4, %5\l  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %26\l  %27 = load float, float* %arrayidx.5, align 4, !tbaa !16\l  %arrayidx9.5 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.4\l  %28 = load i32, i32* %arrayidx9.5, align 4, !tbaa !18\l  %idxprom10.5 = sext i32 %28 to i64\l  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.5\l  %29 = load float, float* %arrayidx11.5, align 4, !tbaa !16\l  %mul.5 = fmul float %27, %29\l  %add12.5 = fadd float %add12.4, %mul.5\l  %indvars.iv.next.5 = or i64 %indvars.iv, 6\l  %30 = add nsw i64 %indvars.iv.next.5, %5\l  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %30\l  %31 = load float, float* %arrayidx.6, align 4, !tbaa !16\l  %arrayidx9.6 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.5\l  %32 = load i32, i32* %arrayidx9.6, align 4, !tbaa !18\l  %idxprom10.6 = sext i32 %32 to i64\l  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.6\l  %33 = load float, float* %arrayidx11.6, align 4, !tbaa !16\l  %mul.6 = fmul float %31, %33\l  %add12.6 = fadd float %add12.5, %mul.6\l  %indvars.iv.next.6 = or i64 %indvars.iv, 7\l  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 255\l  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7,\l... !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x564c93cbb3c0:s0 -> Node0x564c93cbb180;
	Node0x564c93cbb3c0:s1 -> Node0x564c93cbbcd0;
	Node0x564c93cbbcd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body5.7:                                      \l  %34 = add nsw i64 %indvars.iv.next.6, %5\l  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a,\l... i64 0, i64 %34\l  %35 = load float, float* %arrayidx.7, align 4, !tbaa !16\l  %arrayidx9.7 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.6\l  %36 = load i32, i32* %arrayidx9.7, align 4, !tbaa !18\l  %idxprom10.7 = sext i32 %36 to i64\l  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x\l... float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.7\l  %37 = load float, float* %arrayidx11.7, align 4, !tbaa !16\l  %mul.7 = fmul float %35, %37\l  %add12.7 = fadd float %add12.6, %mul.7\l  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8\l  br label %for.body5, !llvm.loop !21\l}"];
	Node0x564c93cbbcd0 -> Node0x564c93cbb3c0;
}
